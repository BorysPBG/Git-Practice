console.log("Start");

// setTimeout - запускает функцию, переданную первым параметром с задержкой в миллисекундах,
//              переданной вторым параметром
setTimeout(() => console.log(5), 0)

// 
let flag = true;
function getFiveAfterSevenSeconds() {
    // 1. Promise - обёртка над асинхронным действием, которую мы можем сохранить в результате синхронного действия
    // и в дальнейшем обработать результат асинхронного действия (с помощью методов then, catch, finally)

    // 2. resolve - встроенный метод и первый параметр функции, которую передаём Promise
    // Данному методу в качестве параметра нужно передать результат в случае успешного сценария
    // Для обработки результата будет использоваться метод then()

    // 3. reject - встроенный метод и второй параметр функции, которую передаём Promise
    // Данному методу в качестве параметра нужно передать результат в случае неуспешного сценария
    // Для обработки результата будет использоваться метод catch()

    return new Promise((resolve, reject) => {
        setTimeout(() => {
            flag ? resolve(5) : reject("Error: flag equal false");
        }, 7000)
    })
}

console.log("Finish");

for (let i = 0; i < 1000000; i++) {
    
}

getFiveAfterSevenSeconds()
    .then((valueFromResolve) => {
        // работа с результатом успешного кейса
        console.log(valueFromResolve)
    })
    .catch((problemFromReject) => {
        // работа с результатом неуспешного кейса
        console.log(problemFromReject)
    })
    .finally(() => console.log('Это действие выполнится при любом сценарии (при любом значении flag)'));


// Встроенный в js метод для запроса на сервер (в качестве параметра передается адрес сервера)

fetch("https://jsonplaceholder.typicode.com/users")
    .then((response) => {
        console.log('Ответ на запрос на сервер на получение данных о пользователях: ', response);
        // JavaScript Object Notation (JSON)
        if (response.ok) {
            return response.json();
        }
    })
    .then(users => {
        // Распечатать на странице список пользователей: name, email, phone, companyName, city

        // 1. Создать список (в html или js)
        // 2. Итерируя массив пользователей при каждой итерации:
            // а. Создаётся новый элемент списка
            // b. Настройка элемента (обязательная часть - это текстовый контент, дополнительно - стилистика)
            // с. Добавить элемент в список
    })
